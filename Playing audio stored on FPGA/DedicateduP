----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 02/07/2023 03:25:13 PM
-- Design Name: 
-- Module Name: AudioProcuP - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use ieee.std_logic_unsigned.all;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity AudioProcuP is
    Port (
        clk,rst,replay : in std_logic;
        pwm            : out std_logic
     );
end AudioProcuP;

architecture Behavioral of AudioProcuP is

-----------component declaration------------
    component rawAudioDatapath is
        Port (
            clk,rst,rst1,rst2,count,replay,shiftLoad     : in std_logic;
            pwm,playback,empty                           : out std_logic
         );
    end component;
    
    component FSM is
        Port (
            rst,clk,playback,empty : in std_logic;
            rst1,rst2,count,shiftLoad : out std_logic
         );
    end component;
---------------------------------------------

----------signal declaration-----------------
    signal toplayback, toempty,tocount,toshiftLoad,torst1,torst2: std_logic;
    
------signals for clock divider---------------
    signal clktemp: std_logic_vector(5 downto 0);
    --signal newclksig : std_logic;
    signal finalclk : std_logic;
   
    
    
    
    

begin

-------stepping down FPGA clk to audible frequency of 187Hz----------
clkProcess: process(clk,rst) is
                    --variable audibleClk: std_logic;
                    begin
                        if(rst = '1') then
                            clktemp <= (others => '0');
                        elsif(rising_edge(clk)) then
                            clktemp <=  clktemp + 1;
                            --newclksig <= clktemp(5);
                        end if;
                        
                        --audibleClk := newclksig;
                        
                end process;
     finalclk <= clktemp(5);
    

---------port mapping------------------------
    datapath: rawAudioDatapath port map(
                clk        => clk,
                rst        => rst,
                rst1       => torst1,
                rst2       => torst2,
                count      => tocount, 
                replay     => replay,
                empty      => toempty,
                shiftLoad  => toshiftLoad,
                pwm        => pwm,
                playback   => toplayback
              );
              
    StateMachine: FSM port map(                  
                    rst       => rst, 
                    clk       => finalclk,
                    playback  => toplayback ,
                    empty     => toempty,
                    rst1      => torst1 ,
                    rst2      => torst2,
                    count     => tocount ,
                    shiftLoad => toshiftLoad
                  );
    


end Behavioral;
